package com.example.eshoptestapi;

import com.example.eshoptestapi.controller.BrandController;
import com.example.eshoptestapi.entity.Brand;
import com.example.eshoptestapi.repository.BrandRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.Arrays;
import java.util.Optional;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class BrandControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private BrandRepository brandRepository;

    @Test
    public void testGetAllBrands() throws Exception {
        when(brandRepository.findAll()).thenReturn(Arrays.asList(new Brand(), new Brand()));

        mockMvc.perform(MockMvcRequestBuilders
                .get("/api/brands")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }

    @Test
    public void testGetBrandById() throws Exception {
        when(brandRepository.findById(1L)).thenReturn(Optional.of(new Brand()));

        mockMvc.perform(MockMvcRequestBuilders
                .get("/api/brands/1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
    }
}